[Speed_Creation]
nb_runs = 30
arguments = 1000,2000,3000,4000,5000
keyword = matrix,calculation
; not currently used
timeout = 60
; timeout in seconds ( does not count the time of the before_task )
before_script = filename
; the script containing the function to run before the task
before_function = functionName
; the function to run before the task
before_task_arguments = {}
; the arguments of the function to run before the task ( as a dictionary )
file_used = filename
; the file used for the task
evaluation_script = evaluationFileName
; the script containing the function to run after the task
evaluation_function = evaluationFunctionName
; the function to run after the task
evaluation_arguments = {}
; the arguments of the function to run after the task ( as a dictionary )
evaluation_sort_order = asc 
; the order of the evaluation for ranking the algorithms ( asc or desc )
extra_html_element = 
; if you want to add a html element to the page to display
arguments_description = Number of samples
; the description of the arguments

description = Here the goal is to learn the structure of the Bayesian network alarm.bif from data. The learning process is done with a small sample size.
; the description of the task
extra_description = All our targets have to learn the structure of the Bayesian network
    alarm.bif from data. The learning process is done with the best algorithm for each target.
    We then compare the performance of each algorithm by computing the Fscore, Recall and Precision of the learned
    structure with respect to the true structure.
; complementary description of the task
task_scale = auto
; the scale of the task graph
post_task_scale = linear
; the scale of the post task graph
task_xlabel = Number of samples
task_ylabel = Time (s)
task_title = Learning time of the best algorithm for each target
task_display = line
post_task_xlabel = Number of samples
post_task_ylabel = Fscore Precision Recall
post_task_title = Fscore of the best algorithm for each target, Precision of the best algorithm for each target, Recall of the best algorithm for each target
post_task_display = line

active = True
; if the task is active or not ( the benchmark will not run it if it is not active but it will be displayed if there are results)